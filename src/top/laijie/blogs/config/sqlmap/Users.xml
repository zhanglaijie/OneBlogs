<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Users">
  <resultMap type="top.laijie.blogs.domain.Users" id="UsersResult">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="username" jdbcType="VARCHAR" property="username"/>
    <result column="password" jdbcType="VARCHAR" property="password"/>
    <result column="nicename" jdbcType="VARCHAR" property="nicename"/>
  </resultMap>

  <select id="queryMessageList" parameterType="top.laijie.bean.Message" resultMap="MessageResult">
    select id,command,description,content from message
    <where>
    	<if test="command!=null and !&quot;&quot;.equals(command.trim())">
    	and command = #{command}
	    </if>
	    <if test="description!=null and !&quot;&quot;.equals(description.trim())">
	    	and description like '%' #{description} '%'
	    </if>
    </where>
  </select>
  <delete id="deleteOne" parameterType="int">
  	delete from message where id = #{id}
  </delete>
  <delete id="deleteBatch" parameterType="java.util.List">
  	delete from message where id in(
  	<foreach collection="list" item="item" separator=",">
  		#{item}
  	</foreach>
  	)
  </delete>
<!-- 
  <select id="version" parameterType="long" resultType="int">
    SELECT version FROM user WHERE id = #{id,jdbcType=INTEGER}
  </select>

  <delete id="delete" parameterType="UserAlias">
    DELETE FROM user WHERE id = #{id:INTEGER}
  </delete>

  <insert id="insert" parameterType="UserAlias" useGeneratedKeys="false">
    INSERT INTO user
    ( id,
    username,
    password,
    administrator
    )
    VALUES
    ( #{id},
    #{username,jdbcType=VARCHAR},
    #{password.encrypted:VARCHAR},
    #{administrator,jdbcType=BOOLEAN}
    )
  </insert>

  <update id="update" parameterType="UserAlias">
    UPDATE user SET
    username = #{username,jdbcType=VARCHAR},
    password = #{password.encrypted,jdbcType=VARCHAR},
    administrator = #{administrator,jdbcType=BOOLEAN}
    WHERE
    id = #{id,jdbcType=INTEGER}
  </update>

    Unique constraint check
  <select id="isUniqueUsername" parameterType="map" resultType="boolean">
    SELECT (count(*) = 0)
    FROM user
    WHERE ((#{userId,jdbcType=BIGINT} IS NOT NULL AND id != #{userId,jdbcType=BIGINT}) OR #{userId,jdbcType=BIGINT} IS
    NULL)  other than me
    AND (username = #{username,jdbcType=VARCHAR})
  </select> -->
</mapper>
